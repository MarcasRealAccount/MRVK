import org.gradle.internal.os.OperatingSystem

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = natives-macos
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	mavenCentral()
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Vulkan
	implementation "org.lwjgl:lwjgl:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-jemalloc:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-openal:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-shaderc:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-stb:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}"
	implementation "org.lwjgl:lwjgl-vulkan:${project.lwjgl_version}"
	runtimeOnly "org.lwjgl:lwjgl:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-jemalloc:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-shaderc:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb:${project.lwjgl_version}:$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}:$lwjglNatives"
	if (lwjglNatives == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan:${project.lwjgl_version}:$lwjglNatives"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
